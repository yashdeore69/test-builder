// gptClient.test.js
// Unit tests for the gptClient module

import { generateTest } from '../src/gptClient.js';

// Beginners: Mock the environment variables for testing
const originalEnv = process.env;

describe('gptClient', () => {
  // Beginners: beforeEach runs before each test
  beforeEach(() => {
    // Reset environment variables before each test
    process.env = { ...originalEnv };
  });

  // Beginners: afterAll runs after all tests in this describe block
  afterAll(() => {
    // Restore original environment variables
    process.env = originalEnv;
  });

  test('should throw error when CURSOR_API_KEY is not set', async () => {
    // Beginners: Delete the API key to simulate missing environment variable
    delete process.env.CURSOR_API_KEY;
    
    const prompt = 'Test prompt';
    
    // Beginners: expect().rejects.toThrow() checks if an async function throws an error
    await expect(generateTest(prompt)).rejects.toThrow(
      'CURSOR_API_KEY not found in environment variables'
    );
  });

  test('should generate test code when API key is provided', async () => {
    // Beginners: Set a mock API key for testing
    process.env.CURSOR_API_KEY = 'test_api_key';
    
    const prompt = 'Generate a test for function add(a, b)';
    
    // Beginners: expect().resolves.toContain() checks if an async function returns a value containing specific text
    await expect(generateTest(prompt)).resolves.toContain('Mock test generated by mockMeDaddy');
    await expect(generateTest(prompt)).resolves.toContain('describe');
    await expect(generateTest(prompt)).resolves.toContain('test');
  });

  test('should include original prompt in mock response', async () => {
    process.env.CURSOR_API_KEY = 'test_api_key';
    
    const testPrompt = 'Generate a test for function multiply(x, y)';
    const result = await generateTest(testPrompt);
    
    // Beginners: Check if the result contains the original prompt
    expect(result).toContain('Original prompt was:');
    expect(result).toContain('Generate a test for function multiply');
  });

  test('should handle empty prompt', async () => {
    process.env.CURSOR_API_KEY = 'test_api_key';
    
    const result = await generateTest('');
    
    expect(result).toContain('Mock test generated by mockMeDaddy');
    expect(result).toContain('Original prompt was: ...');
  });
}); 