// gptClient.js
// This module handles API calls to GPT for generating Jest unit tests

import dotenv from 'dotenv';
import ora from 'ora';

// Load environment variables from .env file
// Beginners: dotenv.config() reads variables from a .env file into process.env
dotenv.config();

/**
 * Generates Jest unit tests using GPT API
 * @param {string} prompt - The prompt to send to GPT
 * @returns {Promise<string>} The generated test code
 */
export async function generateTest(prompt) {
  // Beginners: Check if API key is configured
  const apiKey = process.env.CURSOR_API_KEY;
  if (!apiKey) {
    throw new Error('CURSOR_API_KEY not found in environment variables. Please add it to your .env file.');
  }

  // Beginners: Create a spinner for user feedback
  const spinner = ora('ü§ñ Generating tests with GPT...').start();

  try {
    // Beginners: Make API call to Cursor AI (simulated for now)
    // In a real implementation, this would call the actual Cursor AI API
    const testCode = await callCursorAPI(prompt, apiKey);
    
    spinner.succeed('‚úÖ Tests generated successfully!');
    return testCode;
    
  } catch (error) {
    spinner.fail('‚ùå Failed to generate tests');
    throw error;
  }
}

/**
 * Makes the actual API call to Cursor AI
 * @param {string} prompt - The prompt to send
 * @param {string} apiKey - The API key for authentication
 * @returns {Promise<string>} The generated test code
 */
async function callCursorAPI(prompt, apiKey) {
  // Beginners: This is a placeholder implementation
  // In the real implementation, you would make an HTTP request to the Cursor AI API
  
  // Simulate API call with retry logic
  const maxRetries = 2;
  let lastError;

  for (let attempt = 1; attempt <= maxRetries + 1; attempt++) {
    try {
      // Beginners: Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // TODO: Replace this with actual Cursor AI API call
      // For now, return a mock response
      return generateMockTestResponse(prompt);
      
    } catch (error) {
      lastError = error;
      
      if (attempt <= maxRetries) {
        // Beginners: Exponential backoff - wait longer between retries
        const delay = Math.pow(2, attempt) * 1000;
        console.log(`‚ö†Ô∏è  Attempt ${attempt} failed, retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  throw new Error(`API call failed after ${maxRetries + 1} attempts: ${lastError.message}`);
}

/**
 * Generates a mock test response for development purposes
 * @param {string} prompt - The original prompt
 * @returns {string} Mock test code
 */
function generateMockTestResponse(prompt) {
  // Beginners: This function creates a sample test response for development
  // In production, this would be replaced by actual GPT API response
  
  return `// Mock test generated by mockMeDaddy
// This is a placeholder response for development

describe('Generated Test Suite', () => {
  test('should handle basic functionality', () => {
    // TODO: Replace with actual test implementation
    expect(true).toBe(true);
  });

  test('should handle edge cases', () => {
    // TODO: Add edge case tests
    expect(() => {}).not.toThrow();
  });

  test('should handle error scenarios', () => {
    // TODO: Add error handling tests
    expect(() => {
      throw new Error('Test error');
    }).toThrow('Test error');
  });
});

// Original prompt was: ${prompt.substring(0, 100)}...`;
} 